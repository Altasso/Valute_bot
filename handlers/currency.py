from aiogram import Router, types
from aiogram.filters import Command
from services.exchange import get_currency_rate
from keyboards.inline_refresh import refresh_keyboard
from keyboards.auto_currency_keyboard import generate_currency_keyboard
router = Router()


@router.message(Command("start"))
async def start(message: types.Message):
    keyboard = await generate_currency_keyboard()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.\n–í–≤–µ–¥–∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã —Å–æ —Å–ª–µ—à–µ–º –≤–Ω–∞—á–∞–ª–µ",
                         reply_markup=keyboard
                         )



@router.message()
async def catch_valute(message: types.Message):
    currency_code = message.text.strip().upper()[1:]
    if not currency_code.isalpha() or len(currency_code) != 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 3-–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: usd, eur, jpy.")
        return
    try:
        rate = await get_currency_rate(currency_code)
        await message.answer(f"–ö—É—Ä—Å {currency_code}: {rate:.2f} ‚ÇΩ",
                             reply_markup=refresh_keyboard(currency_code))
    except (KeyError, TypeError):
        await message.answer(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞–ª—é—Ç—É {currency_code} üòî")

@router.callback_query()
async def refresh_callback(call: types.CallbackQuery):
    if not call.data.startswith("refresh:"):
        return
    try:
        code = call.data.split(":")[1]

        rate = await get_currency_rate(code)
        await call.message.edit_text(
            f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫—É—Ä—Å {code}: {rate} ‚ÇΩ",
            reply_markup=refresh_keyboard(code)
        )
        await call.answer("–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)